# run/run_particle.py

# run/run_particle.py

from visualizer import (
    plot_particle_field_heatmap,
    most_common_entangled_pairs,
    track_psi_over_time,
    track_actual_psi_over_time
)

from predictors_particle import (
    extract_tail2_digits,
    predict_2digit_particle_field
)

from config import make_rngs  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á local RNG

import pandas as pd
import os
import json



def run_particle_prediction(
    df,
    seed=None,
    np_rng=None,
    save_image=False,
    return_plot_path=False,
    return_metrics=False,   # ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• hit5/hit10/actual/top10
):
    """
    ‡∏£‡∏±‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡∏î‡πâ‡∏ß‡∏¢ Particle Field (deterministic ‡∏î‡πâ‡∏ß‡∏¢ local RNG)
    - ‡∏™‡πà‡∏á seed ‡∏´‡∏£‡∏∑‡∏≠ np_rng ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á
    - ‡πÑ‡∏°‡πà‡πÅ‡∏ï‡∏∞ global np.random ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏ä‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ multi-request
    """
    # ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° RNG ‡πÅ‡∏ö‡∏ö local
    if np_rng is None:
        if seed is None:
            raise ValueError("‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á seed ‡∏´‡∏£‡∏∑‡∏≠ np_rng ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏•‡πÄ‡∏õ‡πá‡∏ô deterministic")
        _, np_rng = make_rngs(seed)

    # ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß
    past_2digit_results = extract_tail2_digits(df)

    # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏π‡πà‡∏û‡∏±‡∏ß‡∏û‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
    ent_pairs = most_common_entangled_pairs(past_2digit_results, top_k=5)

    # ‚úÖ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ RNG ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
    result_df, picks = predict_2digit_particle_field(
        past_2digits=past_2digit_results,
        k=5,
        entangled_pairs=ent_pairs,
        np_rng=np_rng,          # ‡πÉ‡∏ä‡πâ local RNG
    )

    # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏µ‡∏¢‡πå psi ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠ + sort ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á/‡∏ï‡∏±‡∏î‡∏´‡∏±‡∏ß
    if "Œ®(n)" in result_df.columns:
        result_df = result_df.rename(columns={"Œ®(n)": "psi"})
    if "psi" in result_df.columns:
        result_df = result_df.sort_values("psi", ascending=False).reset_index(drop=True)

    # üóì ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå date)
    latest_draw = None
    last2_str = None
    if "date" in df.columns and df["date"].notna().any():
        latest_draw = df[df["date"].notna()].sort_values("date", ascending=False).iloc[0]
        latest_date_str = latest_draw["date"].strftime('%d-%m-%Y') if hasattr(latest_draw["date"], "strftime") else str(latest_draw["date"])
        last2_str = str(latest_draw.get("last2", "")).zfill(2)
        print(f"\nüìÖ ‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {latest_date_str} | ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å: {last2_str}")

    print("\nüéØ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å Particle Field:")
    for p in picks:
        print("üîÆ", p)

    # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì hit ‡∏ó‡∏±‡πâ‡∏á Top5/Top10 (‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà API ‡πÉ‡∏ä‡πâ)
    metrics = None
    if last2_str is not None and "psi" in result_df.columns:
        top10 = result_df.head(10)["number"].astype(str).tolist()
        top10_set = set(top10)
        top5_set = set(map(str, picks))
        top5_hit = last2_str in top5_set
        top10_hit = last2_str in top10_set

        hit_text_5 = "‚úÖ Top5 hit" if top5_hit else "‚ùå Top5 miss"
        hit_text_10 = "‚úÖ Top10 hit" if top10_hit else "‚ùå Top10 miss"
        print(f"\n{hit_text_5} | {hit_text_10} (‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á {last2_str})")

        metrics = {
            "actual": last2_str,
            "top5": list(top5_set),
            "top10": top10,
            "hit5": top5_hit,
            "hit10": top10_hit,
        }

    if "psi" in result_df.columns:
        print("\nüîù Top 10 Œ®(n):")
        print(result_df.head(10))

    print("\nüß¨ ‡∏Ñ‡∏π‡πà entangled ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:")
    print(ent_pairs)

    # ‚ûï Save CSV
    output_csv = os.path.abspath(
        os.path.join(os.path.dirname(__file__), "..", "outputs", "particle_field_output.csv")
    )
    os.makedirs(os.path.dirname(output_csv), exist_ok=True)
    result_df.to_csv(output_csv, index=False)
    print(f"\nüì¶ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏ó‡∏µ‡πà: {output_csv}")

    # üìä Save heatmap image (‡∏õ‡∏¥‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ API ‡∏ä‡πâ‡∏≤/‡∏Ñ‡πâ‡∏≤‡∏á)
    image_path = None
    if save_image:
        image_path = plot_particle_field_heatmap(result_df, filename="particle_field_heatmap.png")

    # ‚úÖ ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (compatible ‡πÄ‡∏î‡∏¥‡∏°)
    if return_plot_path and return_metrics:
        return result_df, list(picks), image_path, metrics
    elif return_plot_path:
        return result_df, list(picks), image_path
    elif return_metrics:
        return result_df, list(picks), metrics
    else:
        return result_df, list(picks)




# ‚úÖ CLI ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏£‡∏á
if __name__ == "__main__":
    import sys
    import os
    import json
    import pandas as pd

    sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

    # üì• ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å JSON
    json_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "data", "lotto_110year_full_fixed.json"))
    with open(json_path, "r", encoding="utf-8") as f:
        data = json.load(f)

    df = pd.DataFrame(data)

    # üëá ‡πÉ‡∏ä‡πâ parser ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    from data.parse_thai_date import parse_thai_date
    if "date" in df.columns:
        df["date"] = df["date"].apply(parse_thai_date)

    # üîß ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "3digits"
    digit_cols = ["front3_1", "front3_2", "last3_1", "last3_2", "last3_3"]
    available_cols = [col for col in digit_cols if col in df.columns]
    if available_cols:
        df["3digits"] = df[available_cols].astype(str).values.tolist()
        # ‚úÖ explode ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á index
        df_expanded = df.explode("3digits").reset_index(drop=True)
        df_expanded["3digits"] = df_expanded["3digits"].astype(str).str.zfill(3)
    else:
        df_expanded = df.copy()

    # üîÅ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô date ‡πÄ‡∏õ‡πá‡∏ô NaT
    if "date" in df_expanded.columns:
        df_expanded = df_expanded[df_expanded["date"].notna()].copy()

    # üéØ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á seed ‡∏Ñ‡∏á‡∏ó‡∏µ‡πà ‚Äî ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)
    if not df_expanded.empty:
        _, np_rng = make_rngs(20250816)
        run_particle_prediction(df_expanded, np_rng=np_rng, save_image=False)
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ (date = NaT ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)")
