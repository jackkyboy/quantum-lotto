# run/run_schrodinger.py
# run/run_schrodinger.py
# run/run_schrodinger.py
import os
import hashlib
import pandas as pd
from collections import Counter

from predictors.schrodinger import generate_schrodinger_superposition
from predictors.stochastic import stochastic_optimal_prediction
from predictors.unitary_collapse import unitary_cat_collapse_two_digit
from analysis.backtest import backtest_schr_simulation
from utils.statistics import compute_entropy
from config import make_rngs  # ‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á local RNG

# -----------------------------
# Config via ENV
# -----------------------------
DEBUG = os.getenv("DEBUG", "0") == "1"
ENV = os.getenv("ENV", "development")
SCHRO_K = int(os.getenv("SCHRO_K", "10000"))  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏ã‡∏¥‡∏°‡∏π‡∏Ø ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ

def _hash_series(series: pd.Series) -> str:
    """‡∏ó‡∏≥‡πÅ‡∏Æ‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '3digits') ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ cache key"""
    h = hashlib.sha1()
    # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á NaN)
    for v in series.astype(str).tolist():
        h.update(v.encode("utf-8"))
        h.update(b"|")
    return h.hexdigest()

# simple in-memory cache (per-process)
_CACHE = {}

def run_schrodinger_simulation(df, seed=None, np_rng=None, *, k: int | None = None, save_csv: bool = False):
    """
    ‡∏£‡∏±‡∏ô Schr√∂dinger Simulation (‡∏î‡∏µ‡∏ü‡∏≠‡∏•‡∏ï‡πå k=SCHRO_K)
    - ‡πÉ‡∏ä‡πâ cache ‡∏ï‡∏≤‡∏° (seed, data_hash, k) ‡∏•‡∏î‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡∏î‡∏±‡∏Å‡∏ä‡∏±‡∏ô
    - ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞ print ‡πÉ‡∏ô production ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
    """
    if np_rng is None:
        if seed is None:
            raise ValueError("‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á seed ‡∏´‡∏£‡∏∑‡∏≠ np_rng ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ deterministic")
        _, np_rng = make_rngs(seed)

    if "3digits" not in df.columns:
        raise ValueError("df ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '3digits' ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏™‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å")

    k = int(k or SCHRO_K)
    data_hash = _hash_series(df["3digits"].dropna().astype(str))
    cache_key = (seed, data_hash, k)

    # ------------------ Cache short-circuit ------------------
    if ENV == "production" and cache_key in _CACHE:
        sim_counter_10k, hits_cached, entropy_val = _CACHE[cache_key]
        return [], sim_counter_10k, hits_cached

    # ------------------ Run simulation ------------------
    sim_results = generate_schrodinger_superposition(k=k, np_rng=np_rng)
    sim_counter = Counter(sim_results)

    if DEBUG:
        print(f"\nüé≤ Simulation: Top 10 from {k} Schr√∂dinger Rounds:")
        for num, count in sim_counter.most_common(10):
            print(f"üîÆ {num} ‚Üí {count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")

    # I/O: ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô debug ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏±‡πà‡∏á‡πÑ‡∏ß‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    if save_csv or (DEBUG and ENV != "production"):
        output_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "outputs"))
        os.makedirs(output_dir, exist_ok=True)
        output_file = os.path.join(output_dir, f"quantum_sim_{k}.csv")
        pd.DataFrame(sim_results, columns=["prediction"]).to_csv(output_file, index=False)

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì hits/entropy
    actual_set = set(df["3digits"].dropna().astype(str).tolist())
    hits = sum(1 for val in sim_results if val in actual_set)
    entropy_val = compute_entropy(sim_counter)

    if DEBUG:
        print(f"\n‚úÖ Hits: {hits} / {k}")
        print(f"üìä Entropy: {entropy_val:.4f} bits")
        print("\nüß† Stochastic Optimal Prediction (KS-Inspired):")
        for num in stochastic_optimal_prediction(df['3digits'].astype(str).tolist(), k=5, np_rng=np_rng):
            print("üîÆ", num)
        combined_preds = set([x[0] for x in sim_counter.most_common(5)])
        combined_preds.update(stochastic_optimal_prediction(df['3digits'].astype(str).tolist(), k=5, np_rng=np_rng))
        print("\nüì¶ Combined Quantum Picks:")
        for num in sorted(combined_preds):
            print("üîó", num)

    # ‡πÄ‡∏Å‡πá‡∏ö cache ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ production
    if ENV == "production":
        _CACHE[cache_key] = (sim_counter, hits, entropy_val)

    return sim_results, sim_counter, hits


def run_unitary_collapse(seed=2025):
    _, np_rng = make_rngs(seed)
    if DEBUG:
        print("\nüê± Schr√∂dinger Collapse via Parity Breaking (Unitary):")
    unitary_results = unitary_cat_collapse_two_digit(k=5, np_rng=np_rng)
    if DEBUG:
        for n in unitary_results:
            print("üîª", n)


def run_backtest(df):
    past_results = df["3digits"].astype(str).tolist()
    hits, top10_simulated = backtest_schr_simulation(past_results)
    if DEBUG:
        print(f"\nüîç ‡∏û‡∏ö‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á {len(hits)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô Schr√∂dinger Simulation")
    return hits, top10_simulated


# CLI ‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏° (‡∏¢‡πâ‡∏≤‡∏¢ I/O ‡πÑ‡∏õ‡∏ï‡∏≤‡∏° DEBUG/save_csv)
if __name__ == "__main__":
    import sys, json
    sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

    json_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "data", "lotto_110year_full_fixed.json"))
    with open(json_path, "r", encoding="utf-8") as f:
        data = json.load(f)

    df = pd.DataFrame(data)
    digit_cols = ["front3_1", "front3_2", "last3_1", "last3_2", "last3_3"]
    available_cols = [c for c in digit_cols if c in df.columns]
    df["3digits"] = df[available_cols].astype(str).values.tolist()
    df_exploded = pd.DataFrame(df["3digits"].tolist(), index=df.index).melt()["value"]
    df_full = pd.DataFrame({"3digits": df_exploded.dropna().astype(str)})

    seed = 20250816
    run_schrodinger_simulation(df_full, seed=seed, save_csv=DEBUG)
    run_unitary_collapse(seed=seed)
    run_backtest(df_full)
    print("\n‚úÖ Schr√∂dinger Simulation ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î! üéâ")
