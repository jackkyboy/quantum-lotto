# /Users/apichet/quantum_lotto/src/config.py

# config.py
# config.py
import hashlib
import random
import numpy as np

def generate_seed_from_date(draw_date_str: str) -> int:
    """
    ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ date string (‡πÄ‡∏ä‡πà‡∏ô '2025-08-16') ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ SEED (int)
    ‡πÉ‡∏ä‡πâ SHA256 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡πÅ‡∏•‡∏∞‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠
    """
    hash_object = hashlib.sha256(draw_date_str.encode())
    # ‡πÉ‡∏ä‡πâ 32-bit ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö NumPy RNG ‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
    seed = int(hash_object.hexdigest(), 16) % (2**32)
    return seed

def lock_seed(seed_value: int):
    """
    ‡∏•‡πá‡∏≠‡∏Å seed ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á random ‡πÅ‡∏•‡∏∞ numpy (global state)
    ‚ö† ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ñ‡πâ‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô multi-thread/multi-request
    """
    random.seed(seed_value)
    np.random.seed(seed_value)
    print(f"üîê Global Seed ‡∏ñ‡∏π‡∏Å‡∏•‡πá‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà: {seed_value}")

def make_rngs(seed_value: int):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á local RNGs ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á Python ‡πÅ‡∏•‡∏∞ NumPy
    ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á thread ‡∏´‡∏£‡∏∑‡∏≠ async request
    """
    py_rng = random.Random(seed_value)           # local Python RNG
    np_rng = np.random.default_rng(seed_value)   # NumPy Generator
    return py_rng, np_rng
