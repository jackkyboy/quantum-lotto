# /Users/apichet/quantum_lotto/src/config.py
# config.py
import hashlib
import random
import numpy as np

# ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö seed ‡πÉ‡∏´‡πâ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
GLOBAL_SEED: int | None = None

def generate_seed_from_date(draw_date_str: str) -> int:
    """
    ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ date string (‡πÄ‡∏ä‡πà‡∏ô '2025-08-16') ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ SEED (int)
    """
    h = hashlib.sha256(draw_date_str.encode())
    return int(h.hexdigest(), 16) % (10**8)

def lock_seed(seed_value: int):
    """
    ‡∏•‡πá‡∏≠‡∏Å seed ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á random ‡πÅ‡∏•‡∏∞ numpy ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á GLOBAL_SEED
    """
    global GLOBAL_SEED
    GLOBAL_SEED = seed_value
    random.seed(seed_value)
    np.random.seed(seed_value)
    print(f"üîê Seed ‡∏ñ‡∏π‡∏Å‡∏•‡πá‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà: {seed_value}")

def get_seed(default: int | None = None) -> int | None:
    """
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ seed ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏•‡πá‡∏≠‡∏Å‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô default)
    """
    return GLOBAL_SEED if GLOBAL_SEED is not None else default
